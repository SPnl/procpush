<?php

/**
 * Push contact to procurios.
 */

/**
 * Implements hook_init().
 */
function procpush_init() {
  module_load_include("inc", "procpush", "procpush");
}

/**
 * Data fields to be passed to procpush_push_contact($data).
 *
 * selections => array(
 *   'add' => array(),
 *   'remove' => array(),
 * )
 *
 * sp_active => array(
 *   active,
 *   activities: array()
 * )
 *
 * sp_work_and_int => array(
 *   main_task: array(),
 *   industrial_sector,
 *   occupational_group ,
 * )
 *
 */
function procpush_data_fields() {
  $data_fields = array(
    'relation_id' =>  array(
      'title' => 'Relatienummer',
      'type' => 'string',
      'meta' => TRUE,
    ),
    'contact_number' => array(
      'title' => 'Contact nummer',
      'type' => 'string',
      'meta' => TRUE,
    ),
    'overwrite' =>  array(
      'title' => 'Overschrijven',
      'type' => 'boolean',
      'meta' => TRUE,
    ),
    'name' =>  array(
      'title' => 'Gehele naam',
      'type' => 'string',
      'meta' => FALSE,
    ),
    'first_name' =>  array(
      'title' => 'Voornaam',
      'type' => 'string',
      'meta' => FALSE,
    ),
    'middle_name' =>  array(
      'title' => 'Tussenvoegsel',
      'type' => 'string',
      'meta' => FALSE,
    ),
    'last_name' =>  array(
      'title' => 'Achternaam',
      'type' => 'string',
      'meta' => FALSE,
    ),
    'email' =>  array(
      'title' => 'E-mail',
      'type' => 'string',
      'meta' => FALSE,
    ),
    'phone' =>  array(
      'title' => 'Telefoon',
      'type' => 'string',
      'meta' => FALSE,
    ),
    'fixed_phone' =>  array(
      'title' => 'Telefoon vast',
      'type' => 'string',
      'meta' => FALSE,
    ),
    'mobile_phone' =>  array(
      'title' => 'Telefoon mobiel',
      'type' => 'string',
      'meta' => FALSE,
    ),
    'fixed_phone_work' =>  array(
      'title' => 'Telefoon vast werk',
      'type' => 'string',
      'meta' => FALSE,
    ),
    'mobile_phone_work' =>  array(
      'title' => 'Telefoon mobiel werk',
      'type' => 'string',
      'meta' => FALSE,
    ),
    'street' =>  array(
      'title' => 'Straat',
      'type' => 'string',
      'meta' => FALSE,
    ),
    'house_number_and_addition' =>  array(
      'title' => 'Huisnummer inclusief eventuele toevoeging',
      'type' => 'string',
      'meta' => FALSE,
    ),
    'house_number' =>  array(
      'title' => 'Huisnummer',
      'type' => 'string',
      'meta' => FALSE,
    ),
    'house_number_addition' =>  array(
      'title' => 'Huisnummer toevoeging',
      'type' => 'string',
      'meta' => FALSE,
    ),
    'postal_code' =>  array(
      'title' => 'Postcode',
      'type' => 'string',
      'meta' => FALSE,
    ),
    'locality' =>  array(
      'title' => 'Plaats',
      'type' => 'string',
      'meta' => FALSE,
    ),
    'selections' =>  array(
      'title' => 'Selecties',
      'type' => 'array',
      'meta' => FALSE,
    ),
    'sp_active' =>  array(
      'title' => 'Actief SP',
      'type' => 'array',
      'meta' => FALSE,
    ),
    'sp_work_and_int' =>  array(
      'title' => 'Werk en interesses',
      'type' => 'array',
      'meta' => FALSE,
    ),
    'privacy' =>  array(
      'title' => 'Privacy',
      'type' => 'array',
      'meta' => FALSE,
    ),
  );
  return $data_fields;
}

/**
 * Push contact to procurios.
 */
function procpush_push_contact($data, &$debug_info) {
  $error = FALSE;
  $debug_info['raw_data'] = $data;
  // Check if testing.
  if (
    (!empty($data['name']) && strpos(strtolower($data['name']), '-test') !== FALSE) ||
    (!empty($data['first_name']) && strpos(strtolower($data['first_name']), '-test') !== FALSE) ||
    (!empty($data['last_name']) && strpos(strtolower($data['last_name']), '-test') !== FALSE)
  ) {
    drupal_set_message('Test data, not sending to CiviCRM');
    return 'test data';
  }

  // Fix data for Procurios.
  procpush_fix_data($data);
  $debug_info['fixed_data'] = $data;

  // Check if sufficient data.
  if (procpush_check_submission_sufficient($data)) {
    // Make sure last name exists...
    if (empty($data['last_name'])) {
      $data['last_name'] = '.';
    }
    // Create data data_object.
    $data_object = procpush_create_data_object($data);
    if (!empty($data_object)) {
      // Get api form id.
      $form_id = variable_get('procpush_api_registration_form');
      if (!empty($form_id)) {
        // Validate data_object.
        if (procapi_registration_validate_data_object($data_object)) {
          $debug_info['push_data_object'] = $data_object;
          // Push data_object to Procurios.
          if ($relation_id = procapi_registration_push_data_object($data_object)) {
            // Succesful registration.
            if (!empty($data['relation_id']) && $data['relation_id'] != $relation_id) {
              $message = 'Relation id returned from registration api (' . $relation_id . ') differs from relation id given to registration api (' . $data['relation_id'] . ').';
              procpush_error($message, $debug_info);
            }
            // Add relation to selections.
            if (!empty($data['selections'])) {
              if (!procpush_add_relation_to_selections($relation_id, $data['selections'])) {
                $error = 'Error adding relation to selection.';
              }
            }
          }
          else {
            $error = 'Error pushing registration data.';
          }
        }
        else {
          $error = 'Data object validation failed.';
        }
      }
      else {
        $error = 'Api form not found.';
      }
    }
    else {
      $error = 'Data data_object empty.';
    }
  }
  else {
    $error = 'Insufficient data.';
  }

  if ($error === FALSE) {
    watchdog('procpush', 'Data succesfully pushed to Procurios (' . $relation_id . ').');
    return $relation_id;
  }
  $debug_info['push_new_contact_error'] = $error;

  // An error occurred.
  $error_message = 'Er is een fout opgetreden bij het pushen van contact data naar Procurios.';
  procpush_error($error_message, $debug_info);
  return FALSE;
}

/**
 * Implements hook_menu().
 * @return array Menu items
 */

function procpush_menu() {
  $items = array();

  $items['admin/config/sp/procpush'] = array(
    'title' => 'Procurios Push',
    'page callback'  => 'drupal_get_form',
    'page arguments' => array('procpush_settings_form'),
    'access callback' => 'sprbs_access_check',
    'file' => 'procpush.admin.inc',
  );

  $items['admin/config/sp/procpush/settings'] = array(
    'title' => 'Instellingen',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback' => 'sprbs_access_check',
  );

  $items['admin/config/sp/procpush/test'] = array(
    'title' => 'Test',
    'type' => MENU_LOCAL_TASK,
    'page callback'  => 'drupal_get_form',
    'page arguments' => array('procpush_test_form'),
    'file' => 'procpush.test.inc',
    'access callback' => 'sprbs_access_check',
  );

  return $items;
}
